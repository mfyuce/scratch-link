//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.3.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace scratch_schema
{
#pragma warning disable // Disable all warnings

    /// <summary>Description of property (and/or property/value pairs) for sprites.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sprite
    {
        [Newtonsoft.Json.JsonConstructor]
        public Sprite(double @direction, bool @draggable, bool @isStage, int @layerOrder, string @name, SpriteRotationStyle @rotationStyle, double @size, bool @visible, double @x, double @y)
        {
            this.Name = @name;
            this.IsStage = @isStage;
            this.Visible = @visible;
            this.X = @x;
            this.Y = @y;
            this.Size = @size;
            this.Direction = @direction;
            this.Draggable = @draggable;
            this.RotationStyle = @rotationStyle;
            this.LayerOrder = @layerOrder;
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }

        [Newtonsoft.Json.JsonProperty("isStage", Required = Newtonsoft.Json.Required.Always)]
        public bool IsStage { get; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Visible { get; }

        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double X { get; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Y { get; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Size { get; }

        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Direction { get; }

        [Newtonsoft.Json.JsonProperty("draggable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Draggable { get; }

        [Newtonsoft.Json.JsonProperty("rotationStyle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpriteRotationStyle RotationStyle { get; }

        /// <summary>The layer order of a sprite should be a positive number, if specified.</summary>
        [Newtonsoft.Json.JsonProperty("layerOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int LayerOrder { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Properties common to both Scratch 3.0 Stage and Sprite</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Target
    {
        [Newtonsoft.Json.JsonConstructor]
        public Target(System.Collections.Generic.IDictionary<string, Anonymous2> @blocks, System.Collections.Generic.IDictionary<string, string> @broadcasts, System.Collections.Generic.IDictionary<string, Anonymous3> @comments, System.Collections.Generic.ICollection<Costumes> @costumes, int @currentCostume, System.Collections.Generic.IDictionary<string, System.Tuple<string, System.Collections.Generic.ICollection<Anonymous42>>> @lists, System.Collections.Generic.ICollection<Sounds> @sounds, System.Collections.Generic.IDictionary<string, System.Tuple<string, Anonymous42>> @variables, double @volume)
        {
            this.CurrentCostume = @currentCostume;
            this.Blocks = @blocks;
            this.Variables = @variables;
            this.Lists = @lists;
            this.Broadcasts = @broadcasts;
            this.Comments = @comments;
            this.Costumes = @costumes;
            this.Sounds = @sounds;
            this.Volume = @volume;
        }

        [Newtonsoft.Json.JsonProperty("currentCostume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int CurrentCostume { get; }

        [Newtonsoft.Json.JsonProperty("blocks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Anonymous2> Blocks { get; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, System.Tuple<string, Anonymous42>> Variables { get; }

        [Newtonsoft.Json.JsonProperty("lists", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Tuple<string, System.Collections.Generic.ICollection<Anonymous42>>> Lists { get; }

        [Newtonsoft.Json.JsonProperty("broadcasts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Broadcasts { get; }

        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Anonymous3> Comments { get; }

        [Newtonsoft.Json.JsonProperty("costumes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Costumes> Costumes { get; }

        [Newtonsoft.Json.JsonProperty("sounds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Sounds> Sounds { get; }

        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Volume { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Description of property (and/or property/value pairs) that are unique to the stage.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Stage
    {
        [Newtonsoft.Json.JsonConstructor]
        public Stage(bool @isStage, StageLayerOrder @layerOrder, StageName @name, double @tempo, StageVideoState @videoState, double @videoTransparency)
        {
            this.Name = @name;
            this.IsStage = @isStage;
            this.Tempo = @tempo;
            this.VideoTransparency = @videoTransparency;
            this.VideoState = @videoState;
            this.LayerOrder = @layerOrder;
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StageName Name { get; }

        [Newtonsoft.Json.JsonProperty("isStage", Required = Newtonsoft.Json.Required.Always)]
        public bool IsStage { get; }

        [Newtonsoft.Json.JsonProperty("tempo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Tempo { get; }

        [Newtonsoft.Json.JsonProperty("videoTransparency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double VideoTransparency { get; }

        [Newtonsoft.Json.JsonProperty("videoState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StageVideoState VideoState { get; }

        /// <summary>The layer order of the stage should be 0, if specified.</summary>
        [Newtonsoft.Json.JsonProperty("layerOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StageLayerOrder LayerOrder { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Scratch 3.0 Project Schema</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous
    {
        [Newtonsoft.Json.JsonConstructor]
        public Anonymous(Meta @meta, System.Tuple<Anonymous5> @targets)
        {
            this.Meta = @meta;
            this.Targets = @targets;
        }

        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Meta Meta { get; }

        [Newtonsoft.Json.JsonProperty("targets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Tuple<Anonymous5> Targets { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpriteRotationStyle
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all around")]
        All_around = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"don't rotate")]
        Don_t_rotate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"left-right")]
        LeftRight = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous2
    {
        [Newtonsoft.Json.JsonConstructor]
        public Anonymous2(string @comment, object @fields, System.Collections.Generic.IDictionary<string, System.Tuple<double>> @inputs, Mutation @mutation, string @next, string @opcode, string @parent, bool @shadow, bool @topLevel, double @x, double @y)
        {
            this.Opcode = @opcode;
            this.Comment = @comment;
            this.Inputs = @inputs;
            this.Fields = @fields;
            this.Next = @next;
            this.TopLevel = @topLevel;
            this.Parent = @parent;
            this.Shadow = @shadow;
            this.X = @x;
            this.Y = @y;
            this.Mutation = @mutation;
        }

        [Newtonsoft.Json.JsonProperty("opcode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Opcode { get; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; }

        [Newtonsoft.Json.JsonProperty("inputs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Tuple<double>> Inputs { get; }

        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Fields { get; }

        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; }

        [Newtonsoft.Json.JsonProperty("topLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool TopLevel { get; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parent { get; }

        [Newtonsoft.Json.JsonProperty("shadow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Shadow { get; }

        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double X { get; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Y { get; }

        [Newtonsoft.Json.JsonProperty("mutation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mutation Mutation { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous3
    {
        [Newtonsoft.Json.JsonConstructor]
        public Anonymous3(string @blockId, double @height, bool @minimized, string @text, double @width, double? @x, double? @y)
        {
            this.BlockId = @blockId;
            this.Text = @text;
            this.Minimized = @minimized;
            this.X = @x;
            this.Y = @y;
            this.Width = @width;
            this.Height = @height;
        }

        [Newtonsoft.Json.JsonProperty("blockId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlockId { get; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(8000)]
        public string Text { get; }

        [Newtonsoft.Json.JsonProperty("minimized", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Minimized { get; }

        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Width { get; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Height { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Costumes
    {
        [Newtonsoft.Json.JsonConstructor]
        public Costumes(string @assetId, int @bitmapResolution, CostumesDataFormat @dataFormat, string @md5ext, string @name, double @rotationCenterX, double @rotationCenterY)
        {
            this.AssetId = @assetId;
            this.BitmapResolution = @bitmapResolution;
            this.DataFormat = @dataFormat;
            this.Md5ext = @md5ext;
            this.Name = @name;
            this.RotationCenterX = @rotationCenterX;
            this.RotationCenterY = @rotationCenterY;
        }

        [Newtonsoft.Json.JsonProperty("assetId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-fA-F0-9]{32}$")]
        public string AssetId { get; }

        [Newtonsoft.Json.JsonProperty("bitmapResolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitmapResolution { get; }

        [Newtonsoft.Json.JsonProperty("dataFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CostumesDataFormat DataFormat { get; }

        [Newtonsoft.Json.JsonProperty("md5ext", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-fA-F0-9]{32}\.[a-zA-Z]+$")]
        public string Md5ext { get; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }

        /// <summary>This property is not required, but is highly recommended.</summary>
        [Newtonsoft.Json.JsonProperty("rotationCenterX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RotationCenterX { get; }

        /// <summary>This property is not required, but is highly recommended.</summary>
        [Newtonsoft.Json.JsonProperty("rotationCenterY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RotationCenterY { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous42
    {
        [Newtonsoft.Json.JsonConstructor]
        public Anonymous42()
        {
        }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sounds
    {
        [Newtonsoft.Json.JsonConstructor]
        public Sounds(string @assetId, SoundsDataFormat @dataFormat, string @md5ext, string @name, int @rate, int @sampleCount)
        {
            this.AssetId = @assetId;
            this.DataFormat = @dataFormat;
            this.Md5ext = @md5ext;
            this.Name = @name;
            this.Rate = @rate;
            this.SampleCount = @sampleCount;
        }

        [Newtonsoft.Json.JsonProperty("assetId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-fA-F0-9]{32}$")]
        public string AssetId { get; }

        [Newtonsoft.Json.JsonProperty("dataFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SoundsDataFormat DataFormat { get; }

        [Newtonsoft.Json.JsonProperty("md5ext", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-fA-F0-9]{32}\.[a-zA-Z0-9]+$")]
        public string Md5ext { get; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rate { get; }

        [Newtonsoft.Json.JsonProperty("sampleCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SampleCount { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StageLayerOrder
    {
        _0 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StageName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Stage")]
        Stage = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StageVideoState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"on")]
        On = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"on-flipped")]
        OnFlipped = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Meta
    {
        [Newtonsoft.Json.JsonConstructor]
        public Meta(string @agent, string @semver, string @vm)
        {
            this.Semver = @semver;
            this.Vm = @vm;
            this.Agent = @agent;
        }

        [Newtonsoft.Json.JsonProperty("semver", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(3\.[0-9]+\.[0-9]+)$")]
        public string Semver { get; }

        [Newtonsoft.Json.JsonProperty("vm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([0-9]+\.[0-9]+\.[0-9]+)($|-)")]
        public string Vm { get; }

        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agent { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous5 : Stage
    {
        [Newtonsoft.Json.JsonConstructor]
        public Anonymous5(System.Collections.Generic.IDictionary<string, Anonymous2> @blocks, System.Collections.Generic.IDictionary<string, string> @broadcasts, System.Collections.Generic.IDictionary<string, Anonymous3> @comments, System.Collections.Generic.ICollection<Costumes> @costumes, int @currentCostume, bool @isStage, StageLayerOrder @layerOrder, System.Collections.Generic.IDictionary<string, System.Tuple<string, System.Collections.Generic.ICollection<Anonymous42>>> @lists, StageName @name, System.Collections.Generic.ICollection<Sounds> @sounds, double @tempo, System.Collections.Generic.IDictionary<string, System.Tuple<string, Anonymous42>> @variables, StageVideoState @videoState, double @videoTransparency, double @volume)
            : base(isStage, layerOrder, name, tempo, videoState, videoTransparency)
        {
            this.CurrentCostume = @currentCostume;
            this.Blocks = @blocks;
            this.Variables = @variables;
            this.Lists = @lists;
            this.Broadcasts = @broadcasts;
            this.Comments = @comments;
            this.Costumes = @costumes;
            this.Sounds = @sounds;
            this.Volume = @volume;
        }

        [Newtonsoft.Json.JsonProperty("currentCostume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int CurrentCostume { get; }

        [Newtonsoft.Json.JsonProperty("blocks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Anonymous2> Blocks { get; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, System.Tuple<string, Anonymous42>> Variables { get; }

        [Newtonsoft.Json.JsonProperty("lists", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Tuple<string, System.Collections.Generic.ICollection<Anonymous42>>> Lists { get; }

        [Newtonsoft.Json.JsonProperty("broadcasts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Broadcasts { get; }

        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Anonymous3> Comments { get; }

        [Newtonsoft.Json.JsonProperty("costumes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Costumes> Costumes { get; }

        [Newtonsoft.Json.JsonProperty("sounds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Sounds> Sounds { get; }

        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Volume { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Mutation
    {
        [Newtonsoft.Json.JsonConstructor]
        public Mutation(string @argumentids, System.Collections.Generic.ICollection<object> @children, Hasnext2? @hasnext, string @proccode, MutationTagName @tagName, Hasnext2? @warp)
        {
            this.TagName = @tagName;
            this.Children = @children;
            this.Proccode = @proccode;
            this.Argumentids = @argumentids;
            this.Warp = @warp;
            this.Hasnext = @hasnext;
        }

        [Newtonsoft.Json.JsonProperty("tagName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MutationTagName TagName { get; }

        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Children { get; }

        [Newtonsoft.Json.JsonProperty("proccode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Proccode { get; }

        [Newtonsoft.Json.JsonProperty("argumentids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Argumentids { get; }

        [Newtonsoft.Json.JsonProperty("warp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Hasnext2? Warp { get; }

        [Newtonsoft.Json.JsonProperty("hasnext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Hasnext2? Hasnext { get; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CostumesDataFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"png")]
        Png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"svg")]
        Svg = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"jpeg")]
        Jpeg = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"jpg")]
        Jpg = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"bmp")]
        Bmp = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"gif")]
        Gif = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous422
    {
        [Newtonsoft.Json.JsonConstructor]
        public Anonymous422()
        {
        }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SoundsDataFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"wav")]
        Wav = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"wave")]
        Wave = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mp3")]
        Mp3 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Hasnext2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"null")]
        Null = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MutationTagName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mutation")]
        Mutation = 0,

    }
}
